// Generated by gencpp from file rm_msgs/RfidStatus.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_RFIDSTATUS_H
#define RM_MSGS_MESSAGE_RFIDSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct RfidStatus_
{
  typedef RfidStatus_<ContainerAllocator> Type;

  RfidStatus_()
    : rfid_status(0)
    , stamp()  {
    }
  RfidStatus_(const ContainerAllocator& _alloc)
    : rfid_status(0)
    , stamp()  {
  (void)_alloc;
    }



   typedef uint32_t _rfid_status_type;
  _rfid_status_type rfid_status;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::rm_msgs::RfidStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::RfidStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RfidStatus_

typedef ::rm_msgs::RfidStatus_<std::allocator<void> > RfidStatus;

typedef boost::shared_ptr< ::rm_msgs::RfidStatus > RfidStatusPtr;
typedef boost::shared_ptr< ::rm_msgs::RfidStatus const> RfidStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::RfidStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::RfidStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::RfidStatus_<ContainerAllocator1> & lhs, const ::rm_msgs::RfidStatus_<ContainerAllocator2> & rhs)
{
  return lhs.rfid_status == rhs.rfid_status &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::RfidStatus_<ContainerAllocator1> & lhs, const ::rm_msgs::RfidStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::RfidStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::RfidStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::RfidStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::RfidStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::RfidStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::RfidStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::RfidStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "778ccf0329dbf9adf1847960b71a0e1f";
  }

  static const char* value(const ::rm_msgs::RfidStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x778ccf0329dbf9adULL;
  static const uint64_t static_value2 = 0xf1847960b71a0e1fULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::RfidStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/RfidStatus";
  }

  static const char* value(const ::rm_msgs::RfidStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::RfidStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 rfid_status\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::RfidStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::RfidStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rfid_status);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RfidStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::RfidStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::RfidStatus_<ContainerAllocator>& v)
  {
    s << indent << "rfid_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rfid_status);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_RFIDSTATUS_H
