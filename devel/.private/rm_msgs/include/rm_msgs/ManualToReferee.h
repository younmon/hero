// Generated by gencpp from file rm_msgs/ManualToReferee.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_MANUALTOREFEREE_H
#define RM_MSGS_MESSAGE_MANUALTOREFEREE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct ManualToReferee_
{
  typedef ManualToReferee_<ContainerAllocator> Type;

  ManualToReferee_()
    : power_limit_state(0)
    , shoot_frequency(0)
    , cover_state(false)
    , gimbal_eject(false)
    , hero_eject_flag(false)
    , engineer_calibration_state(false)
    , det_color(0)
    , det_target(0)
    , det_armor_target(0)
    , det_exposure(0)
    , stamp()  {
    }
  ManualToReferee_(const ContainerAllocator& _alloc)
    : power_limit_state(0)
    , shoot_frequency(0)
    , cover_state(false)
    , gimbal_eject(false)
    , hero_eject_flag(false)
    , engineer_calibration_state(false)
    , det_color(0)
    , det_target(0)
    , det_armor_target(0)
    , det_exposure(0)
    , stamp()  {
  (void)_alloc;
    }



   typedef uint8_t _power_limit_state_type;
  _power_limit_state_type power_limit_state;

   typedef uint8_t _shoot_frequency_type;
  _shoot_frequency_type shoot_frequency;

   typedef uint8_t _cover_state_type;
  _cover_state_type cover_state;

   typedef uint8_t _gimbal_eject_type;
  _gimbal_eject_type gimbal_eject;

   typedef uint8_t _hero_eject_flag_type;
  _hero_eject_flag_type hero_eject_flag;

   typedef uint8_t _engineer_calibration_state_type;
  _engineer_calibration_state_type engineer_calibration_state;

   typedef uint8_t _det_color_type;
  _det_color_type det_color;

   typedef uint8_t _det_target_type;
  _det_target_type det_target;

   typedef uint8_t _det_armor_target_type;
  _det_armor_target_type det_armor_target;

   typedef uint8_t _det_exposure_type;
  _det_exposure_type det_exposure;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::rm_msgs::ManualToReferee_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::ManualToReferee_<ContainerAllocator> const> ConstPtr;

}; // struct ManualToReferee_

typedef ::rm_msgs::ManualToReferee_<std::allocator<void> > ManualToReferee;

typedef boost::shared_ptr< ::rm_msgs::ManualToReferee > ManualToRefereePtr;
typedef boost::shared_ptr< ::rm_msgs::ManualToReferee const> ManualToRefereeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::ManualToReferee_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::ManualToReferee_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::ManualToReferee_<ContainerAllocator1> & lhs, const ::rm_msgs::ManualToReferee_<ContainerAllocator2> & rhs)
{
  return lhs.power_limit_state == rhs.power_limit_state &&
    lhs.shoot_frequency == rhs.shoot_frequency &&
    lhs.cover_state == rhs.cover_state &&
    lhs.gimbal_eject == rhs.gimbal_eject &&
    lhs.hero_eject_flag == rhs.hero_eject_flag &&
    lhs.engineer_calibration_state == rhs.engineer_calibration_state &&
    lhs.det_color == rhs.det_color &&
    lhs.det_target == rhs.det_target &&
    lhs.det_armor_target == rhs.det_armor_target &&
    lhs.det_exposure == rhs.det_exposure &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::ManualToReferee_<ContainerAllocator1> & lhs, const ::rm_msgs::ManualToReferee_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::ManualToReferee_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::ManualToReferee_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::ManualToReferee_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::ManualToReferee_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::ManualToReferee_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::ManualToReferee_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::ManualToReferee_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e51133323f107db810c25eb7eb924a25";
  }

  static const char* value(const ::rm_msgs::ManualToReferee_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe51133323f107db8ULL;
  static const uint64_t static_value2 = 0x10c25eb7eb924a25ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::ManualToReferee_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/ManualToReferee";
  }

  static const char* value(const ::rm_msgs::ManualToReferee_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::ManualToReferee_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 power_limit_state\n"
"\n"
"#standard\n"
"uint8 shoot_frequency\n"
"bool cover_state\n"
"\n"
"#hero\n"
"bool gimbal_eject\n"
"bool hero_eject_flag\n"
"\n"
"#engineer\n"
"bool engineer_calibration_state\n"
"\n"
"#detection\n"
"uint8 det_color\n"
"uint8 det_target\n"
"uint8 det_armor_target\n"
"uint8 det_exposure\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::ManualToReferee_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::ManualToReferee_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.power_limit_state);
      stream.next(m.shoot_frequency);
      stream.next(m.cover_state);
      stream.next(m.gimbal_eject);
      stream.next(m.hero_eject_flag);
      stream.next(m.engineer_calibration_state);
      stream.next(m.det_color);
      stream.next(m.det_target);
      stream.next(m.det_armor_target);
      stream.next(m.det_exposure);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManualToReferee_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::ManualToReferee_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::ManualToReferee_<ContainerAllocator>& v)
  {
    s << indent << "power_limit_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_limit_state);
    s << indent << "shoot_frequency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shoot_frequency);
    s << indent << "cover_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cover_state);
    s << indent << "gimbal_eject: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gimbal_eject);
    s << indent << "hero_eject_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hero_eject_flag);
    s << indent << "engineer_calibration_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engineer_calibration_state);
    s << indent << "det_color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.det_color);
    s << indent << "det_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.det_target);
    s << indent << "det_armor_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.det_armor_target);
    s << indent << "det_exposure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.det_exposure);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_MANUALTOREFEREE_H
