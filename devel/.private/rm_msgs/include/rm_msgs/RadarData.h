// Generated by gencpp from file rm_msgs/RadarData.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_RADARDATA_H
#define RM_MSGS_MESSAGE_RADARDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct RadarData_
{
  typedef RadarData_<ContainerAllocator> Type;

  RadarData_()
    : robot_id(0)
    , state(0)  {
    }
  RadarData_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _robot_id_type;
  _robot_id_type robot_id;

   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FLYING_SLOPE)
  #undef FLYING_SLOPE
#endif
#if defined(_WIN32) && defined(MARKING)
  #undef MARKING
#endif
#if defined(_WIN32) && defined(POINT_ONE_SHOOTING)
  #undef POINT_ONE_SHOOTING
#endif
#if defined(_WIN32) && defined(POINT_TWO_SHOOTING)
  #undef POINT_TWO_SHOOTING
#endif
#if defined(_WIN32) && defined(REFILLING)
  #undef REFILLING
#endif

  enum {
    FLYING_SLOPE = 1u,
    MARKING = 2u,
    POINT_ONE_SHOOTING = 3u,
    POINT_TWO_SHOOTING = 4u,
    REFILLING = 5u,
  };


  typedef boost::shared_ptr< ::rm_msgs::RadarData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::RadarData_<ContainerAllocator> const> ConstPtr;

}; // struct RadarData_

typedef ::rm_msgs::RadarData_<std::allocator<void> > RadarData;

typedef boost::shared_ptr< ::rm_msgs::RadarData > RadarDataPtr;
typedef boost::shared_ptr< ::rm_msgs::RadarData const> RadarDataConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::RadarData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::RadarData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::RadarData_<ContainerAllocator1> & lhs, const ::rm_msgs::RadarData_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::RadarData_<ContainerAllocator1> & lhs, const ::rm_msgs::RadarData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::RadarData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::RadarData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::RadarData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::RadarData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::RadarData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::RadarData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::RadarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d804292969a0f67322d7ec462883ef13";
  }

  static const char* value(const ::rm_msgs::RadarData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd804292969a0f673ULL;
  static const uint64_t static_value2 = 0x22d7ec462883ef13ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::RadarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/RadarData";
  }

  static const char* value(const ::rm_msgs::RadarData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::RadarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FLYING_SLOPE = 1\n"
"uint8 MARKING = 2\n"
"uint8 POINT_ONE_SHOOTING = 3\n"
"uint8 POINT_TWO_SHOOTING = 4\n"
"uint8 REFILLING = 5\n"
"uint8 robot_id\n"
"\n"
"uint8 state\n"
;
  }

  static const char* value(const ::rm_msgs::RadarData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::RadarData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::RadarData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::RadarData_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_RADARDATA_H
