// Generated by gencpp from file rm_msgs/ChassisCmd.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_CHASSISCMD_H
#define RM_MSGS_MESSAGE_CHASSISCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Accel.h>

namespace rm_msgs
{
template <class ContainerAllocator>
struct ChassisCmd_
{
  typedef ChassisCmd_<ContainerAllocator> Type;

  ChassisCmd_()
    : mode(0)
    , accel()
    , power_limit(0.0)
    , follow_source_frame()
    , command_source_frame()
    , stamp()  {
    }
  ChassisCmd_(const ContainerAllocator& _alloc)
    : mode(0)
    , accel(_alloc)
    , power_limit(0.0)
    , follow_source_frame(_alloc)
    , command_source_frame(_alloc)
    , stamp()  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef double _power_limit_type;
  _power_limit_type power_limit;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _follow_source_frame_type;
  _follow_source_frame_type follow_source_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _command_source_frame_type;
  _command_source_frame_type command_source_frame;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RAW)
  #undef RAW
#endif
#if defined(_WIN32) && defined(FOLLOW)
  #undef FOLLOW
#endif
#if defined(_WIN32) && defined(GYRO)
  #undef GYRO
#endif
#if defined(_WIN32) && defined(TWIST)
  #undef TWIST
#endif

  enum {
    RAW = 0u,
    FOLLOW = 1u,
    GYRO = 2u,
    TWIST = 3u,
  };


  typedef boost::shared_ptr< ::rm_msgs::ChassisCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::ChassisCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisCmd_

typedef ::rm_msgs::ChassisCmd_<std::allocator<void> > ChassisCmd;

typedef boost::shared_ptr< ::rm_msgs::ChassisCmd > ChassisCmdPtr;
typedef boost::shared_ptr< ::rm_msgs::ChassisCmd const> ChassisCmdConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::ChassisCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::ChassisCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::ChassisCmd_<ContainerAllocator1> & lhs, const ::rm_msgs::ChassisCmd_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.accel == rhs.accel &&
    lhs.power_limit == rhs.power_limit &&
    lhs.follow_source_frame == rhs.follow_source_frame &&
    lhs.command_source_frame == rhs.command_source_frame &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::ChassisCmd_<ContainerAllocator1> & lhs, const ::rm_msgs::ChassisCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::ChassisCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::ChassisCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::ChassisCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::ChassisCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::ChassisCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::ChassisCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::ChassisCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6328cffed58da8d33a54a5d480fb65fd";
  }

  static const char* value(const ::rm_msgs::ChassisCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6328cffed58da8d3ULL;
  static const uint64_t static_value2 = 0x3a54a5d480fb65fdULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::ChassisCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/ChassisCmd";
  }

  static const char* value(const ::rm_msgs::ChassisCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::ChassisCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RAW = 0\n"
"uint8 FOLLOW = 1\n"
"uint8 GYRO = 2\n"
"uint8 TWIST = 3\n"
"\n"
"uint8 mode\n"
"geometry_msgs/Accel accel\n"
"float64 power_limit\n"
"string follow_source_frame\n"
"string command_source_frame\n"
"time stamp\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rm_msgs::ChassisCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::ChassisCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.accel);
      stream.next(m.power_limit);
      stream.next(m.follow_source_frame);
      stream.next(m.command_source_frame);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::ChassisCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::ChassisCmd_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "power_limit: ";
    Printer<double>::stream(s, indent + "  ", v.power_limit);
    s << indent << "follow_source_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.follow_source_frame);
    s << indent << "command_source_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.command_source_frame);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_CHASSISCMD_H
