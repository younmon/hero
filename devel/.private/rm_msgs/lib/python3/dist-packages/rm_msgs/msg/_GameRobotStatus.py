# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/GameRobotStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class GameRobotStatus(genpy.Message):
  _md5sum = "dc5fb7b81d23729d5093f2858a70344a"
  _type = "rm_msgs/GameRobotStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 RED_HERO = 1
uint8 RED_ENGINEER = 2
uint8 RED_STANDARD_3 = 3
uint8 RED_STANDARD_4 = 4
uint8 RED_STANDARD_5 = 5
uint8 RED_AERIAL = 6
uint8 RED_SENTRY = 7
uint8 RED_RADAR = 9
uint8 BLUE_HERO = 101
uint8 BLUE_ENGINEER = 102
uint8 BLUE_STANDARD_3 = 103
uint8 BLUE_STANDARD_4 = 104
uint8 BLUE_STANDARD_5 = 105
uint8 BLUE_AERIAL = 106
uint8 BLUE_SENTRY = 107
uint8 BLUE_RADAR = 109

uint8 robot_id
uint8 robot_level
uint16 remain_hp
uint16 max_hp
uint16 shooter_id_1_17_mm_cooling_rate
uint16 shooter_id_1_17_mm_cooling_limit
uint16 shooter_id_1_17_mm_speed_limit
uint16 shooter_id_2_17_mm_cooling_rate
uint16 shooter_id_2_17_mm_cooling_limit
uint16 shooter_id_2_17_mm_speed_limit
uint16 shooter_id_1_42_mm_cooling_rate
uint16 shooter_id_1_42_mm_cooling_limit
uint16 shooter_id_1_42_mm_speed_limit
uint16 chassis_power_limit
uint8 mains_power_gimbal_output
uint8 mains_power_chassis_output
uint8 mains_power_shooter_output

time stamp
"""
  # Pseudo-constants
  RED_HERO = 1
  RED_ENGINEER = 2
  RED_STANDARD_3 = 3
  RED_STANDARD_4 = 4
  RED_STANDARD_5 = 5
  RED_AERIAL = 6
  RED_SENTRY = 7
  RED_RADAR = 9
  BLUE_HERO = 101
  BLUE_ENGINEER = 102
  BLUE_STANDARD_3 = 103
  BLUE_STANDARD_4 = 104
  BLUE_STANDARD_5 = 105
  BLUE_AERIAL = 106
  BLUE_SENTRY = 107
  BLUE_RADAR = 109

  __slots__ = ['robot_id','robot_level','remain_hp','max_hp','shooter_id_1_17_mm_cooling_rate','shooter_id_1_17_mm_cooling_limit','shooter_id_1_17_mm_speed_limit','shooter_id_2_17_mm_cooling_rate','shooter_id_2_17_mm_cooling_limit','shooter_id_2_17_mm_speed_limit','shooter_id_1_42_mm_cooling_rate','shooter_id_1_42_mm_cooling_limit','shooter_id_1_42_mm_speed_limit','chassis_power_limit','mains_power_gimbal_output','mains_power_chassis_output','mains_power_shooter_output','stamp']
  _slot_types = ['uint8','uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint8','uint8','uint8','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_id,robot_level,remain_hp,max_hp,shooter_id_1_17_mm_cooling_rate,shooter_id_1_17_mm_cooling_limit,shooter_id_1_17_mm_speed_limit,shooter_id_2_17_mm_cooling_rate,shooter_id_2_17_mm_cooling_limit,shooter_id_2_17_mm_speed_limit,shooter_id_1_42_mm_cooling_rate,shooter_id_1_42_mm_cooling_limit,shooter_id_1_42_mm_speed_limit,chassis_power_limit,mains_power_gimbal_output,mains_power_chassis_output,mains_power_shooter_output,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GameRobotStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_id is None:
        self.robot_id = 0
      if self.robot_level is None:
        self.robot_level = 0
      if self.remain_hp is None:
        self.remain_hp = 0
      if self.max_hp is None:
        self.max_hp = 0
      if self.shooter_id_1_17_mm_cooling_rate is None:
        self.shooter_id_1_17_mm_cooling_rate = 0
      if self.shooter_id_1_17_mm_cooling_limit is None:
        self.shooter_id_1_17_mm_cooling_limit = 0
      if self.shooter_id_1_17_mm_speed_limit is None:
        self.shooter_id_1_17_mm_speed_limit = 0
      if self.shooter_id_2_17_mm_cooling_rate is None:
        self.shooter_id_2_17_mm_cooling_rate = 0
      if self.shooter_id_2_17_mm_cooling_limit is None:
        self.shooter_id_2_17_mm_cooling_limit = 0
      if self.shooter_id_2_17_mm_speed_limit is None:
        self.shooter_id_2_17_mm_speed_limit = 0
      if self.shooter_id_1_42_mm_cooling_rate is None:
        self.shooter_id_1_42_mm_cooling_rate = 0
      if self.shooter_id_1_42_mm_cooling_limit is None:
        self.shooter_id_1_42_mm_cooling_limit = 0
      if self.shooter_id_1_42_mm_speed_limit is None:
        self.shooter_id_1_42_mm_speed_limit = 0
      if self.chassis_power_limit is None:
        self.chassis_power_limit = 0
      if self.mains_power_gimbal_output is None:
        self.mains_power_gimbal_output = 0
      if self.mains_power_chassis_output is None:
        self.mains_power_chassis_output = 0
      if self.mains_power_shooter_output is None:
        self.mains_power_shooter_output = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
    else:
      self.robot_id = 0
      self.robot_level = 0
      self.remain_hp = 0
      self.max_hp = 0
      self.shooter_id_1_17_mm_cooling_rate = 0
      self.shooter_id_1_17_mm_cooling_limit = 0
      self.shooter_id_1_17_mm_speed_limit = 0
      self.shooter_id_2_17_mm_cooling_rate = 0
      self.shooter_id_2_17_mm_cooling_limit = 0
      self.shooter_id_2_17_mm_speed_limit = 0
      self.shooter_id_1_42_mm_cooling_rate = 0
      self.shooter_id_1_42_mm_cooling_limit = 0
      self.shooter_id_1_42_mm_speed_limit = 0
      self.chassis_power_limit = 0
      self.mains_power_gimbal_output = 0
      self.mains_power_chassis_output = 0
      self.mains_power_shooter_output = 0
      self.stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B12H3B2I().pack(_x.robot_id, _x.robot_level, _x.remain_hp, _x.max_hp, _x.shooter_id_1_17_mm_cooling_rate, _x.shooter_id_1_17_mm_cooling_limit, _x.shooter_id_1_17_mm_speed_limit, _x.shooter_id_2_17_mm_cooling_rate, _x.shooter_id_2_17_mm_cooling_limit, _x.shooter_id_2_17_mm_speed_limit, _x.shooter_id_1_42_mm_cooling_rate, _x.shooter_id_1_42_mm_cooling_limit, _x.shooter_id_1_42_mm_speed_limit, _x.chassis_power_limit, _x.mains_power_gimbal_output, _x.mains_power_chassis_output, _x.mains_power_shooter_output, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.robot_id, _x.robot_level, _x.remain_hp, _x.max_hp, _x.shooter_id_1_17_mm_cooling_rate, _x.shooter_id_1_17_mm_cooling_limit, _x.shooter_id_1_17_mm_speed_limit, _x.shooter_id_2_17_mm_cooling_rate, _x.shooter_id_2_17_mm_cooling_limit, _x.shooter_id_2_17_mm_speed_limit, _x.shooter_id_1_42_mm_cooling_rate, _x.shooter_id_1_42_mm_cooling_limit, _x.shooter_id_1_42_mm_speed_limit, _x.chassis_power_limit, _x.mains_power_gimbal_output, _x.mains_power_chassis_output, _x.mains_power_shooter_output, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2B12H3B2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B12H3B2I().pack(_x.robot_id, _x.robot_level, _x.remain_hp, _x.max_hp, _x.shooter_id_1_17_mm_cooling_rate, _x.shooter_id_1_17_mm_cooling_limit, _x.shooter_id_1_17_mm_speed_limit, _x.shooter_id_2_17_mm_cooling_rate, _x.shooter_id_2_17_mm_cooling_limit, _x.shooter_id_2_17_mm_speed_limit, _x.shooter_id_1_42_mm_cooling_rate, _x.shooter_id_1_42_mm_cooling_limit, _x.shooter_id_1_42_mm_speed_limit, _x.chassis_power_limit, _x.mains_power_gimbal_output, _x.mains_power_chassis_output, _x.mains_power_shooter_output, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.robot_id, _x.robot_level, _x.remain_hp, _x.max_hp, _x.shooter_id_1_17_mm_cooling_rate, _x.shooter_id_1_17_mm_cooling_limit, _x.shooter_id_1_17_mm_speed_limit, _x.shooter_id_2_17_mm_cooling_rate, _x.shooter_id_2_17_mm_cooling_limit, _x.shooter_id_2_17_mm_speed_limit, _x.shooter_id_1_42_mm_cooling_rate, _x.shooter_id_1_42_mm_cooling_limit, _x.shooter_id_1_42_mm_speed_limit, _x.chassis_power_limit, _x.mains_power_gimbal_output, _x.mains_power_chassis_output, _x.mains_power_shooter_output, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2B12H3B2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B12H3B2I = None
def _get_struct_2B12H3B2I():
    global _struct_2B12H3B2I
    if _struct_2B12H3B2I is None:
        _struct_2B12H3B2I = struct.Struct("<2B12H3B2I")
    return _struct_2B12H3B2I
