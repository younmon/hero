# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/ManualToReferee.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class ManualToReferee(genpy.Message):
  _md5sum = "e51133323f107db810c25eb7eb924a25"
  _type = "rm_msgs/ManualToReferee"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 power_limit_state

#standard
uint8 shoot_frequency
bool cover_state

#hero
bool gimbal_eject
bool hero_eject_flag

#engineer
bool engineer_calibration_state

#detection
uint8 det_color
uint8 det_target
uint8 det_armor_target
uint8 det_exposure

time stamp
"""
  __slots__ = ['power_limit_state','shoot_frequency','cover_state','gimbal_eject','hero_eject_flag','engineer_calibration_state','det_color','det_target','det_armor_target','det_exposure','stamp']
  _slot_types = ['uint8','uint8','bool','bool','bool','bool','uint8','uint8','uint8','uint8','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       power_limit_state,shoot_frequency,cover_state,gimbal_eject,hero_eject_flag,engineer_calibration_state,det_color,det_target,det_armor_target,det_exposure,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManualToReferee, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.power_limit_state is None:
        self.power_limit_state = 0
      if self.shoot_frequency is None:
        self.shoot_frequency = 0
      if self.cover_state is None:
        self.cover_state = False
      if self.gimbal_eject is None:
        self.gimbal_eject = False
      if self.hero_eject_flag is None:
        self.hero_eject_flag = False
      if self.engineer_calibration_state is None:
        self.engineer_calibration_state = False
      if self.det_color is None:
        self.det_color = 0
      if self.det_target is None:
        self.det_target = 0
      if self.det_armor_target is None:
        self.det_armor_target = 0
      if self.det_exposure is None:
        self.det_exposure = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
    else:
      self.power_limit_state = 0
      self.shoot_frequency = 0
      self.cover_state = False
      self.gimbal_eject = False
      self.hero_eject_flag = False
      self.engineer_calibration_state = False
      self.det_color = 0
      self.det_target = 0
      self.det_armor_target = 0
      self.det_exposure = 0
      self.stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10B2I().pack(_x.power_limit_state, _x.shoot_frequency, _x.cover_state, _x.gimbal_eject, _x.hero_eject_flag, _x.engineer_calibration_state, _x.det_color, _x.det_target, _x.det_armor_target, _x.det_exposure, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 18
      (_x.power_limit_state, _x.shoot_frequency, _x.cover_state, _x.gimbal_eject, _x.hero_eject_flag, _x.engineer_calibration_state, _x.det_color, _x.det_target, _x.det_armor_target, _x.det_exposure, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_10B2I().unpack(str[start:end])
      self.cover_state = bool(self.cover_state)
      self.gimbal_eject = bool(self.gimbal_eject)
      self.hero_eject_flag = bool(self.hero_eject_flag)
      self.engineer_calibration_state = bool(self.engineer_calibration_state)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10B2I().pack(_x.power_limit_state, _x.shoot_frequency, _x.cover_state, _x.gimbal_eject, _x.hero_eject_flag, _x.engineer_calibration_state, _x.det_color, _x.det_target, _x.det_armor_target, _x.det_exposure, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 18
      (_x.power_limit_state, _x.shoot_frequency, _x.cover_state, _x.gimbal_eject, _x.hero_eject_flag, _x.engineer_calibration_state, _x.det_color, _x.det_target, _x.det_armor_target, _x.det_exposure, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_10B2I().unpack(str[start:end])
      self.cover_state = bool(self.cover_state)
      self.gimbal_eject = bool(self.gimbal_eject)
      self.hero_eject_flag = bool(self.hero_eject_flag)
      self.engineer_calibration_state = bool(self.engineer_calibration_state)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B2I = None
def _get_struct_10B2I():
    global _struct_10B2I
    if _struct_10B2I is None:
        _struct_10B2I = struct.Struct("<10B2I")
    return _struct_10B2I
