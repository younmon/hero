# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/DartClientCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DartClientCmd(genpy.Message):
  _md5sum = "437595b17fc80be6e24b8cf8e3dabe1a"
  _type = "rm_msgs/DartClientCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 dart_launch_opening_status
uint8 dart_attack_target
uint16 target_change_time
uint8 first_dart_speed
uint8 second_dart_speed
uint8 third_dart_speed
uint8 fourth_dart_speed
uint16 last_dart_launch_time
uint16 operate_launch_cmd_time

time stamp
"""
  __slots__ = ['dart_launch_opening_status','dart_attack_target','target_change_time','first_dart_speed','second_dart_speed','third_dart_speed','fourth_dart_speed','last_dart_launch_time','operate_launch_cmd_time','stamp']
  _slot_types = ['uint8','uint8','uint16','uint8','uint8','uint8','uint8','uint16','uint16','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dart_launch_opening_status,dart_attack_target,target_change_time,first_dart_speed,second_dart_speed,third_dart_speed,fourth_dart_speed,last_dart_launch_time,operate_launch_cmd_time,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DartClientCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.dart_launch_opening_status is None:
        self.dart_launch_opening_status = 0
      if self.dart_attack_target is None:
        self.dart_attack_target = 0
      if self.target_change_time is None:
        self.target_change_time = 0
      if self.first_dart_speed is None:
        self.first_dart_speed = 0
      if self.second_dart_speed is None:
        self.second_dart_speed = 0
      if self.third_dart_speed is None:
        self.third_dart_speed = 0
      if self.fourth_dart_speed is None:
        self.fourth_dart_speed = 0
      if self.last_dart_launch_time is None:
        self.last_dart_launch_time = 0
      if self.operate_launch_cmd_time is None:
        self.operate_launch_cmd_time = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
    else:
      self.dart_launch_opening_status = 0
      self.dart_attack_target = 0
      self.target_change_time = 0
      self.first_dart_speed = 0
      self.second_dart_speed = 0
      self.third_dart_speed = 0
      self.fourth_dart_speed = 0
      self.last_dart_launch_time = 0
      self.operate_launch_cmd_time = 0
      self.stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BH4B2H2I().pack(_x.dart_launch_opening_status, _x.dart_attack_target, _x.target_change_time, _x.first_dart_speed, _x.second_dart_speed, _x.third_dart_speed, _x.fourth_dart_speed, _x.last_dart_launch_time, _x.operate_launch_cmd_time, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.dart_launch_opening_status, _x.dart_attack_target, _x.target_change_time, _x.first_dart_speed, _x.second_dart_speed, _x.third_dart_speed, _x.fourth_dart_speed, _x.last_dart_launch_time, _x.operate_launch_cmd_time, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2BH4B2H2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BH4B2H2I().pack(_x.dart_launch_opening_status, _x.dart_attack_target, _x.target_change_time, _x.first_dart_speed, _x.second_dart_speed, _x.third_dart_speed, _x.fourth_dart_speed, _x.last_dart_launch_time, _x.operate_launch_cmd_time, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.dart_launch_opening_status, _x.dart_attack_target, _x.target_change_time, _x.first_dart_speed, _x.second_dart_speed, _x.third_dart_speed, _x.fourth_dart_speed, _x.last_dart_launch_time, _x.operate_launch_cmd_time, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2BH4B2H2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BH4B2H2I = None
def _get_struct_2BH4B2H2I():
    global _struct_2BH4B2H2I
    if _struct_2BH4B2H2I is None:
        _struct_2BH4B2H2I = struct.Struct("<2BH4B2H2I")
    return _struct_2BH4B2H2I
