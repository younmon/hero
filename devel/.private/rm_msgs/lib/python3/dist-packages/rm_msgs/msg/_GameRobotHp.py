# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/GameRobotHp.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class GameRobotHp(genpy.Message):
  _md5sum = "66fa2022c43b8226b63be911e036f15a"
  _type = "rm_msgs/GameRobotHp"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 red_1_robot_hp
uint16 red_2_robot_hp
uint16 red_3_robot_hp
uint16 red_4_robot_hp
uint16 red_5_robot_hp
uint16 red_7_robot_hp
uint16 blue_1_robot_hp
uint16 blue_2_robot_hp
uint16 blue_3_robot_hp
uint16 blue_4_robot_hp
uint16 blue_5_robot_hp
uint16 blue_7_robot_hp

time stamp
"""
  __slots__ = ['red_1_robot_hp','red_2_robot_hp','red_3_robot_hp','red_4_robot_hp','red_5_robot_hp','red_7_robot_hp','blue_1_robot_hp','blue_2_robot_hp','blue_3_robot_hp','blue_4_robot_hp','blue_5_robot_hp','blue_7_robot_hp','stamp']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       red_1_robot_hp,red_2_robot_hp,red_3_robot_hp,red_4_robot_hp,red_5_robot_hp,red_7_robot_hp,blue_1_robot_hp,blue_2_robot_hp,blue_3_robot_hp,blue_4_robot_hp,blue_5_robot_hp,blue_7_robot_hp,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GameRobotHp, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.red_1_robot_hp is None:
        self.red_1_robot_hp = 0
      if self.red_2_robot_hp is None:
        self.red_2_robot_hp = 0
      if self.red_3_robot_hp is None:
        self.red_3_robot_hp = 0
      if self.red_4_robot_hp is None:
        self.red_4_robot_hp = 0
      if self.red_5_robot_hp is None:
        self.red_5_robot_hp = 0
      if self.red_7_robot_hp is None:
        self.red_7_robot_hp = 0
      if self.blue_1_robot_hp is None:
        self.blue_1_robot_hp = 0
      if self.blue_2_robot_hp is None:
        self.blue_2_robot_hp = 0
      if self.blue_3_robot_hp is None:
        self.blue_3_robot_hp = 0
      if self.blue_4_robot_hp is None:
        self.blue_4_robot_hp = 0
      if self.blue_5_robot_hp is None:
        self.blue_5_robot_hp = 0
      if self.blue_7_robot_hp is None:
        self.blue_7_robot_hp = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
    else:
      self.red_1_robot_hp = 0
      self.red_2_robot_hp = 0
      self.red_3_robot_hp = 0
      self.red_4_robot_hp = 0
      self.red_5_robot_hp = 0
      self.red_7_robot_hp = 0
      self.blue_1_robot_hp = 0
      self.blue_2_robot_hp = 0
      self.blue_3_robot_hp = 0
      self.blue_4_robot_hp = 0
      self.blue_5_robot_hp = 0
      self.blue_7_robot_hp = 0
      self.stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12H2I().pack(_x.red_1_robot_hp, _x.red_2_robot_hp, _x.red_3_robot_hp, _x.red_4_robot_hp, _x.red_5_robot_hp, _x.red_7_robot_hp, _x.blue_1_robot_hp, _x.blue_2_robot_hp, _x.blue_3_robot_hp, _x.blue_4_robot_hp, _x.blue_5_robot_hp, _x.blue_7_robot_hp, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.red_1_robot_hp, _x.red_2_robot_hp, _x.red_3_robot_hp, _x.red_4_robot_hp, _x.red_5_robot_hp, _x.red_7_robot_hp, _x.blue_1_robot_hp, _x.blue_2_robot_hp, _x.blue_3_robot_hp, _x.blue_4_robot_hp, _x.blue_5_robot_hp, _x.blue_7_robot_hp, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_12H2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12H2I().pack(_x.red_1_robot_hp, _x.red_2_robot_hp, _x.red_3_robot_hp, _x.red_4_robot_hp, _x.red_5_robot_hp, _x.red_7_robot_hp, _x.blue_1_robot_hp, _x.blue_2_robot_hp, _x.blue_3_robot_hp, _x.blue_4_robot_hp, _x.blue_5_robot_hp, _x.blue_7_robot_hp, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.red_1_robot_hp, _x.red_2_robot_hp, _x.red_3_robot_hp, _x.red_4_robot_hp, _x.red_5_robot_hp, _x.red_7_robot_hp, _x.blue_1_robot_hp, _x.blue_2_robot_hp, _x.blue_3_robot_hp, _x.blue_4_robot_hp, _x.blue_5_robot_hp, _x.blue_7_robot_hp, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_12H2I().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12H2I = None
def _get_struct_12H2I():
    global _struct_12H2I
    if _struct_12H2I is None:
        _struct_12H2I = struct.Struct("<12H2I")
    return _struct_12H2I
