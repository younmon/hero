# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/DbusData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DbusData(genpy.Message):
  _md5sum = "0220a682827f4bc1471e95e351489508"
  _type = "rm_msgs/DbusData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 UP = 1
uint8 DOWN = 2
uint8 MID = 3

float64 ch_l_x
float64 ch_l_y
float64 ch_r_x
float64 ch_r_y

uint8 s_l
uint8 s_r
float64 wheel
#mouse
float64 m_x
float64 m_y
float64 m_z
bool p_l
bool p_r
#key board
bool key_w
bool key_s
bool key_a
bool key_d
bool key_shift
bool key_ctrl
bool key_q
bool key_e
bool key_r
bool key_f
bool key_g
bool key_z
bool key_x
bool key_c
bool key_v
bool key_b

time stamp
"""
  # Pseudo-constants
  UP = 1
  DOWN = 2
  MID = 3

  __slots__ = ['ch_l_x','ch_l_y','ch_r_x','ch_r_y','s_l','s_r','wheel','m_x','m_y','m_z','p_l','p_r','key_w','key_s','key_a','key_d','key_shift','key_ctrl','key_q','key_e','key_r','key_f','key_g','key_z','key_x','key_c','key_v','key_b','stamp']
  _slot_types = ['float64','float64','float64','float64','uint8','uint8','float64','float64','float64','float64','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ch_l_x,ch_l_y,ch_r_x,ch_r_y,s_l,s_r,wheel,m_x,m_y,m_z,p_l,p_r,key_w,key_s,key_a,key_d,key_shift,key_ctrl,key_q,key_e,key_r,key_f,key_g,key_z,key_x,key_c,key_v,key_b,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DbusData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ch_l_x is None:
        self.ch_l_x = 0.
      if self.ch_l_y is None:
        self.ch_l_y = 0.
      if self.ch_r_x is None:
        self.ch_r_x = 0.
      if self.ch_r_y is None:
        self.ch_r_y = 0.
      if self.s_l is None:
        self.s_l = 0
      if self.s_r is None:
        self.s_r = 0
      if self.wheel is None:
        self.wheel = 0.
      if self.m_x is None:
        self.m_x = 0.
      if self.m_y is None:
        self.m_y = 0.
      if self.m_z is None:
        self.m_z = 0.
      if self.p_l is None:
        self.p_l = False
      if self.p_r is None:
        self.p_r = False
      if self.key_w is None:
        self.key_w = False
      if self.key_s is None:
        self.key_s = False
      if self.key_a is None:
        self.key_a = False
      if self.key_d is None:
        self.key_d = False
      if self.key_shift is None:
        self.key_shift = False
      if self.key_ctrl is None:
        self.key_ctrl = False
      if self.key_q is None:
        self.key_q = False
      if self.key_e is None:
        self.key_e = False
      if self.key_r is None:
        self.key_r = False
      if self.key_f is None:
        self.key_f = False
      if self.key_g is None:
        self.key_g = False
      if self.key_z is None:
        self.key_z = False
      if self.key_x is None:
        self.key_x = False
      if self.key_c is None:
        self.key_c = False
      if self.key_v is None:
        self.key_v = False
      if self.key_b is None:
        self.key_b = False
      if self.stamp is None:
        self.stamp = genpy.Time()
    else:
      self.ch_l_x = 0.
      self.ch_l_y = 0.
      self.ch_r_x = 0.
      self.ch_r_y = 0.
      self.s_l = 0
      self.s_r = 0
      self.wheel = 0.
      self.m_x = 0.
      self.m_y = 0.
      self.m_z = 0.
      self.p_l = False
      self.p_r = False
      self.key_w = False
      self.key_s = False
      self.key_a = False
      self.key_d = False
      self.key_shift = False
      self.key_ctrl = False
      self.key_q = False
      self.key_e = False
      self.key_r = False
      self.key_f = False
      self.key_g = False
      self.key_z = False
      self.key_x = False
      self.key_c = False
      self.key_v = False
      self.key_b = False
      self.stamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d2B4d18B2I().pack(_x.ch_l_x, _x.ch_l_y, _x.ch_r_x, _x.ch_r_y, _x.s_l, _x.s_r, _x.wheel, _x.m_x, _x.m_y, _x.m_z, _x.p_l, _x.p_r, _x.key_w, _x.key_s, _x.key_a, _x.key_d, _x.key_shift, _x.key_ctrl, _x.key_q, _x.key_e, _x.key_r, _x.key_f, _x.key_g, _x.key_z, _x.key_x, _x.key_c, _x.key_v, _x.key_b, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 92
      (_x.ch_l_x, _x.ch_l_y, _x.ch_r_x, _x.ch_r_y, _x.s_l, _x.s_r, _x.wheel, _x.m_x, _x.m_y, _x.m_z, _x.p_l, _x.p_r, _x.key_w, _x.key_s, _x.key_a, _x.key_d, _x.key_shift, _x.key_ctrl, _x.key_q, _x.key_e, _x.key_r, _x.key_f, _x.key_g, _x.key_z, _x.key_x, _x.key_c, _x.key_v, _x.key_b, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_4d2B4d18B2I().unpack(str[start:end])
      self.p_l = bool(self.p_l)
      self.p_r = bool(self.p_r)
      self.key_w = bool(self.key_w)
      self.key_s = bool(self.key_s)
      self.key_a = bool(self.key_a)
      self.key_d = bool(self.key_d)
      self.key_shift = bool(self.key_shift)
      self.key_ctrl = bool(self.key_ctrl)
      self.key_q = bool(self.key_q)
      self.key_e = bool(self.key_e)
      self.key_r = bool(self.key_r)
      self.key_f = bool(self.key_f)
      self.key_g = bool(self.key_g)
      self.key_z = bool(self.key_z)
      self.key_x = bool(self.key_x)
      self.key_c = bool(self.key_c)
      self.key_v = bool(self.key_v)
      self.key_b = bool(self.key_b)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d2B4d18B2I().pack(_x.ch_l_x, _x.ch_l_y, _x.ch_r_x, _x.ch_r_y, _x.s_l, _x.s_r, _x.wheel, _x.m_x, _x.m_y, _x.m_z, _x.p_l, _x.p_r, _x.key_w, _x.key_s, _x.key_a, _x.key_d, _x.key_shift, _x.key_ctrl, _x.key_q, _x.key_e, _x.key_r, _x.key_f, _x.key_g, _x.key_z, _x.key_x, _x.key_c, _x.key_v, _x.key_b, _x.stamp.secs, _x.stamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 92
      (_x.ch_l_x, _x.ch_l_y, _x.ch_r_x, _x.ch_r_y, _x.s_l, _x.s_r, _x.wheel, _x.m_x, _x.m_y, _x.m_z, _x.p_l, _x.p_r, _x.key_w, _x.key_s, _x.key_a, _x.key_d, _x.key_shift, _x.key_ctrl, _x.key_q, _x.key_e, _x.key_r, _x.key_f, _x.key_g, _x.key_z, _x.key_x, _x.key_c, _x.key_v, _x.key_b, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_4d2B4d18B2I().unpack(str[start:end])
      self.p_l = bool(self.p_l)
      self.p_r = bool(self.p_r)
      self.key_w = bool(self.key_w)
      self.key_s = bool(self.key_s)
      self.key_a = bool(self.key_a)
      self.key_d = bool(self.key_d)
      self.key_shift = bool(self.key_shift)
      self.key_ctrl = bool(self.key_ctrl)
      self.key_q = bool(self.key_q)
      self.key_e = bool(self.key_e)
      self.key_r = bool(self.key_r)
      self.key_f = bool(self.key_f)
      self.key_g = bool(self.key_g)
      self.key_z = bool(self.key_z)
      self.key_x = bool(self.key_x)
      self.key_c = bool(self.key_c)
      self.key_v = bool(self.key_v)
      self.key_b = bool(self.key_b)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d2B4d18B2I = None
def _get_struct_4d2B4d18B2I():
    global _struct_4d2B4d18B2I
    if _struct_4d2B4d18B2I is None:
        _struct_4d2B4d18B2I = struct.Struct("<4d2B4d18B2I")
    return _struct_4d2B4d18B2I
