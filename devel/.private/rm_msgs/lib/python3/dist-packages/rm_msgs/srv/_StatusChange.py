# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/StatusChangeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StatusChangeRequest(genpy.Message):
  _md5sum = "e5974674c612c2ddc9fe100a2fa0334b"
  _type = "rm_msgs/StatusChangeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 color
uint8 target
uint8 armor_target
uint8 exposure
uint8 use_id_classification
uint8 RED = 0
uint8 BLUE = 1
uint8 ARMOR = 0
uint8 BUFF = 1
uint8 ARMOR_ALL = 0
uint8 ARMOR_OUTPOST_BASE = 1
uint8 ARMOR_WITHOUT_OUTPOST_BASE = 2
uint8 EXPOSURE_LEVEL_0 = 0
uint8 EXPOSURE_LEVEL_1 = 1
uint8 EXPOSURE_LEVEL_2 = 2
uint8 EXPOSURE_LEVEL_3 = 3
uint8 EXPOSURE_LEVEL_4 = 4
"""
  # Pseudo-constants
  RED = 0
  BLUE = 1
  ARMOR = 0
  BUFF = 1
  ARMOR_ALL = 0
  ARMOR_OUTPOST_BASE = 1
  ARMOR_WITHOUT_OUTPOST_BASE = 2
  EXPOSURE_LEVEL_0 = 0
  EXPOSURE_LEVEL_1 = 1
  EXPOSURE_LEVEL_2 = 2
  EXPOSURE_LEVEL_3 = 3
  EXPOSURE_LEVEL_4 = 4

  __slots__ = ['color','target','armor_target','exposure','use_id_classification']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       color,target,armor_target,exposure,use_id_classification

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatusChangeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.color is None:
        self.color = 0
      if self.target is None:
        self.target = 0
      if self.armor_target is None:
        self.armor_target = 0
      if self.exposure is None:
        self.exposure = 0
      if self.use_id_classification is None:
        self.use_id_classification = 0
    else:
      self.color = 0
      self.target = 0
      self.armor_target = 0
      self.exposure = 0
      self.use_id_classification = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.color, _x.target, _x.armor_target, _x.exposure, _x.use_id_classification))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.color, _x.target, _x.armor_target, _x.exposure, _x.use_id_classification,) = _get_struct_5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.color, _x.target, _x.armor_target, _x.exposure, _x.use_id_classification))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.color, _x.target, _x.armor_target, _x.exposure, _x.use_id_classification,) = _get_struct_5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rm_msgs/StatusChangeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StatusChangeResponse(genpy.Message):
  _md5sum = "6b239f2cd0aa0d5816b7c3243eb924c4"
  _type = "rm_msgs/StatusChangeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool switch_is_success

"""
  __slots__ = ['switch_is_success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       switch_is_success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatusChangeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.switch_is_success is None:
        self.switch_is_success = False
    else:
      self.switch_is_success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.switch_is_success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.switch_is_success,) = _get_struct_B().unpack(str[start:end])
      self.switch_is_success = bool(self.switch_is_success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.switch_is_success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.switch_is_success,) = _get_struct_B().unpack(str[start:end])
      self.switch_is_success = bool(self.switch_is_success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class StatusChange(object):
  _type          = 'rm_msgs/StatusChange'
  _md5sum = '88a5578dd9e0ad314373c2139d66dbf6'
  _request_class  = StatusChangeRequest
  _response_class = StatusChangeResponse
