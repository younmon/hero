// Generated by gencpp from file rm_msgs/EnableImuTriggerRequest.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_ENABLEIMUTRIGGERREQUEST_H
#define RM_MSGS_MESSAGE_ENABLEIMUTRIGGERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct EnableImuTriggerRequest_
{
  typedef EnableImuTriggerRequest_<ContainerAllocator> Type;

  EnableImuTriggerRequest_()
    : imu_name()
    , enable_trigger(false)  {
    }
  EnableImuTriggerRequest_(const ContainerAllocator& _alloc)
    : imu_name(_alloc)
    , enable_trigger(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _imu_name_type;
  _imu_name_type imu_name;

   typedef uint8_t _enable_trigger_type;
  _enable_trigger_type enable_trigger;





  typedef boost::shared_ptr< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EnableImuTriggerRequest_

typedef ::rm_msgs::EnableImuTriggerRequest_<std::allocator<void> > EnableImuTriggerRequest;

typedef boost::shared_ptr< ::rm_msgs::EnableImuTriggerRequest > EnableImuTriggerRequestPtr;
typedef boost::shared_ptr< ::rm_msgs::EnableImuTriggerRequest const> EnableImuTriggerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator1> & lhs, const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.imu_name == rhs.imu_name &&
    lhs.enable_trigger == rhs.enable_trigger;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator1> & lhs, const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a69c0d0d9957c038763bb859200c8069";
  }

  static const char* value(const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa69c0d0d9957c038ULL;
  static const uint64_t static_value2 = 0x763bb859200c8069ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/EnableImuTriggerRequest";
  }

  static const char* value(const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string imu_name\n"
"bool enable_trigger\n"
;
  }

  static const char* value(const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_name);
      stream.next(m.enable_trigger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EnableImuTriggerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::EnableImuTriggerRequest_<ContainerAllocator>& v)
  {
    s << indent << "imu_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.imu_name);
    s << indent << "enable_trigger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_trigger);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_ENABLEIMUTRIGGERREQUEST_H
