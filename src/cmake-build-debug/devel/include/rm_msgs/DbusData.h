// Generated by gencpp from file rm_msgs/DbusData.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_DBUSDATA_H
#define RM_MSGS_MESSAGE_DBUSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct DbusData_
{
  typedef DbusData_<ContainerAllocator> Type;

  DbusData_()
    : ch_l_x(0.0)
    , ch_l_y(0.0)
    , ch_r_x(0.0)
    , ch_r_y(0.0)
    , s_l(0)
    , s_r(0)
    , wheel(0.0)
    , m_x(0.0)
    , m_y(0.0)
    , m_z(0.0)
    , p_l(false)
    , p_r(false)
    , key_w(false)
    , key_s(false)
    , key_a(false)
    , key_d(false)
    , key_shift(false)
    , key_ctrl(false)
    , key_q(false)
    , key_e(false)
    , key_r(false)
    , key_f(false)
    , key_g(false)
    , key_z(false)
    , key_x(false)
    , key_c(false)
    , key_v(false)
    , key_b(false)
    , stamp()  {
    }
  DbusData_(const ContainerAllocator& _alloc)
    : ch_l_x(0.0)
    , ch_l_y(0.0)
    , ch_r_x(0.0)
    , ch_r_y(0.0)
    , s_l(0)
    , s_r(0)
    , wheel(0.0)
    , m_x(0.0)
    , m_y(0.0)
    , m_z(0.0)
    , p_l(false)
    , p_r(false)
    , key_w(false)
    , key_s(false)
    , key_a(false)
    , key_d(false)
    , key_shift(false)
    , key_ctrl(false)
    , key_q(false)
    , key_e(false)
    , key_r(false)
    , key_f(false)
    , key_g(false)
    , key_z(false)
    , key_x(false)
    , key_c(false)
    , key_v(false)
    , key_b(false)
    , stamp()  {
  (void)_alloc;
    }



   typedef double _ch_l_x_type;
  _ch_l_x_type ch_l_x;

   typedef double _ch_l_y_type;
  _ch_l_y_type ch_l_y;

   typedef double _ch_r_x_type;
  _ch_r_x_type ch_r_x;

   typedef double _ch_r_y_type;
  _ch_r_y_type ch_r_y;

   typedef uint8_t _s_l_type;
  _s_l_type s_l;

   typedef uint8_t _s_r_type;
  _s_r_type s_r;

   typedef double _wheel_type;
  _wheel_type wheel;

   typedef double _m_x_type;
  _m_x_type m_x;

   typedef double _m_y_type;
  _m_y_type m_y;

   typedef double _m_z_type;
  _m_z_type m_z;

   typedef uint8_t _p_l_type;
  _p_l_type p_l;

   typedef uint8_t _p_r_type;
  _p_r_type p_r;

   typedef uint8_t _key_w_type;
  _key_w_type key_w;

   typedef uint8_t _key_s_type;
  _key_s_type key_s;

   typedef uint8_t _key_a_type;
  _key_a_type key_a;

   typedef uint8_t _key_d_type;
  _key_d_type key_d;

   typedef uint8_t _key_shift_type;
  _key_shift_type key_shift;

   typedef uint8_t _key_ctrl_type;
  _key_ctrl_type key_ctrl;

   typedef uint8_t _key_q_type;
  _key_q_type key_q;

   typedef uint8_t _key_e_type;
  _key_e_type key_e;

   typedef uint8_t _key_r_type;
  _key_r_type key_r;

   typedef uint8_t _key_f_type;
  _key_f_type key_f;

   typedef uint8_t _key_g_type;
  _key_g_type key_g;

   typedef uint8_t _key_z_type;
  _key_z_type key_z;

   typedef uint8_t _key_x_type;
  _key_x_type key_x;

   typedef uint8_t _key_c_type;
  _key_c_type key_c;

   typedef uint8_t _key_v_type;
  _key_v_type key_v;

   typedef uint8_t _key_b_type;
  _key_b_type key_b;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UP)
  #undef UP
#endif
#if defined(_WIN32) && defined(DOWN)
  #undef DOWN
#endif
#if defined(_WIN32) && defined(MID)
  #undef MID
#endif

  enum {
    UP = 1u,
    DOWN = 2u,
    MID = 3u,
  };


  typedef boost::shared_ptr< ::rm_msgs::DbusData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::DbusData_<ContainerAllocator> const> ConstPtr;

}; // struct DbusData_

typedef ::rm_msgs::DbusData_<std::allocator<void> > DbusData;

typedef boost::shared_ptr< ::rm_msgs::DbusData > DbusDataPtr;
typedef boost::shared_ptr< ::rm_msgs::DbusData const> DbusDataConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::DbusData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::DbusData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::DbusData_<ContainerAllocator1> & lhs, const ::rm_msgs::DbusData_<ContainerAllocator2> & rhs)
{
  return lhs.ch_l_x == rhs.ch_l_x &&
    lhs.ch_l_y == rhs.ch_l_y &&
    lhs.ch_r_x == rhs.ch_r_x &&
    lhs.ch_r_y == rhs.ch_r_y &&
    lhs.s_l == rhs.s_l &&
    lhs.s_r == rhs.s_r &&
    lhs.wheel == rhs.wheel &&
    lhs.m_x == rhs.m_x &&
    lhs.m_y == rhs.m_y &&
    lhs.m_z == rhs.m_z &&
    lhs.p_l == rhs.p_l &&
    lhs.p_r == rhs.p_r &&
    lhs.key_w == rhs.key_w &&
    lhs.key_s == rhs.key_s &&
    lhs.key_a == rhs.key_a &&
    lhs.key_d == rhs.key_d &&
    lhs.key_shift == rhs.key_shift &&
    lhs.key_ctrl == rhs.key_ctrl &&
    lhs.key_q == rhs.key_q &&
    lhs.key_e == rhs.key_e &&
    lhs.key_r == rhs.key_r &&
    lhs.key_f == rhs.key_f &&
    lhs.key_g == rhs.key_g &&
    lhs.key_z == rhs.key_z &&
    lhs.key_x == rhs.key_x &&
    lhs.key_c == rhs.key_c &&
    lhs.key_v == rhs.key_v &&
    lhs.key_b == rhs.key_b &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::DbusData_<ContainerAllocator1> & lhs, const ::rm_msgs::DbusData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::DbusData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::DbusData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::DbusData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::DbusData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::DbusData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::DbusData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::DbusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0220a682827f4bc1471e95e351489508";
  }

  static const char* value(const ::rm_msgs::DbusData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0220a682827f4bc1ULL;
  static const uint64_t static_value2 = 0x471e95e351489508ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::DbusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/DbusData";
  }

  static const char* value(const ::rm_msgs::DbusData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::DbusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 UP = 1\n"
"uint8 DOWN = 2\n"
"uint8 MID = 3\n"
"\n"
"float64 ch_l_x\n"
"float64 ch_l_y\n"
"float64 ch_r_x\n"
"float64 ch_r_y\n"
"\n"
"uint8 s_l\n"
"uint8 s_r\n"
"float64 wheel\n"
"#mouse\n"
"float64 m_x\n"
"float64 m_y\n"
"float64 m_z\n"
"bool p_l\n"
"bool p_r\n"
"#key board\n"
"bool key_w\n"
"bool key_s\n"
"bool key_a\n"
"bool key_d\n"
"bool key_shift\n"
"bool key_ctrl\n"
"bool key_q\n"
"bool key_e\n"
"bool key_r\n"
"bool key_f\n"
"bool key_g\n"
"bool key_z\n"
"bool key_x\n"
"bool key_c\n"
"bool key_v\n"
"bool key_b\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::DbusData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::DbusData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ch_l_x);
      stream.next(m.ch_l_y);
      stream.next(m.ch_r_x);
      stream.next(m.ch_r_y);
      stream.next(m.s_l);
      stream.next(m.s_r);
      stream.next(m.wheel);
      stream.next(m.m_x);
      stream.next(m.m_y);
      stream.next(m.m_z);
      stream.next(m.p_l);
      stream.next(m.p_r);
      stream.next(m.key_w);
      stream.next(m.key_s);
      stream.next(m.key_a);
      stream.next(m.key_d);
      stream.next(m.key_shift);
      stream.next(m.key_ctrl);
      stream.next(m.key_q);
      stream.next(m.key_e);
      stream.next(m.key_r);
      stream.next(m.key_f);
      stream.next(m.key_g);
      stream.next(m.key_z);
      stream.next(m.key_x);
      stream.next(m.key_c);
      stream.next(m.key_v);
      stream.next(m.key_b);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DbusData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::DbusData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::DbusData_<ContainerAllocator>& v)
  {
    s << indent << "ch_l_x: ";
    Printer<double>::stream(s, indent + "  ", v.ch_l_x);
    s << indent << "ch_l_y: ";
    Printer<double>::stream(s, indent + "  ", v.ch_l_y);
    s << indent << "ch_r_x: ";
    Printer<double>::stream(s, indent + "  ", v.ch_r_x);
    s << indent << "ch_r_y: ";
    Printer<double>::stream(s, indent + "  ", v.ch_r_y);
    s << indent << "s_l: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.s_l);
    s << indent << "s_r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.s_r);
    s << indent << "wheel: ";
    Printer<double>::stream(s, indent + "  ", v.wheel);
    s << indent << "m_x: ";
    Printer<double>::stream(s, indent + "  ", v.m_x);
    s << indent << "m_y: ";
    Printer<double>::stream(s, indent + "  ", v.m_y);
    s << indent << "m_z: ";
    Printer<double>::stream(s, indent + "  ", v.m_z);
    s << indent << "p_l: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.p_l);
    s << indent << "p_r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.p_r);
    s << indent << "key_w: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_w);
    s << indent << "key_s: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_s);
    s << indent << "key_a: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_a);
    s << indent << "key_d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_d);
    s << indent << "key_shift: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_shift);
    s << indent << "key_ctrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_ctrl);
    s << indent << "key_q: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_q);
    s << indent << "key_e: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_e);
    s << indent << "key_r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_r);
    s << indent << "key_f: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_f);
    s << indent << "key_g: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_g);
    s << indent << "key_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_z);
    s << indent << "key_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_x);
    s << indent << "key_c: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_c);
    s << indent << "key_v: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_v);
    s << indent << "key_b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_b);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_DBUSDATA_H
