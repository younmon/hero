// Generated by gencpp from file rm_msgs/GameStatus.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_GAMESTATUS_H
#define RM_MSGS_MESSAGE_GAMESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct GameStatus_
{
  typedef GameStatus_<ContainerAllocator> Type;

  GameStatus_()
    : game_type(0)
    , game_progress(0)
    , stage_remain_time(0)
    , sync_time_stamp(0)
    , stamp()  {
    }
  GameStatus_(const ContainerAllocator& _alloc)
    : game_type(0)
    , game_progress(0)
    , stage_remain_time(0)
    , sync_time_stamp(0)
    , stamp()  {
  (void)_alloc;
    }



   typedef uint8_t _game_type_type;
  _game_type_type game_type;

   typedef uint8_t _game_progress_type;
  _game_progress_type game_progress;

   typedef uint16_t _stage_remain_time_type;
  _stage_remain_time_type stage_remain_time;

   typedef uint64_t _sync_time_stamp_type;
  _sync_time_stamp_type sync_time_stamp;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::rm_msgs::GameStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::GameStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GameStatus_

typedef ::rm_msgs::GameStatus_<std::allocator<void> > GameStatus;

typedef boost::shared_ptr< ::rm_msgs::GameStatus > GameStatusPtr;
typedef boost::shared_ptr< ::rm_msgs::GameStatus const> GameStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::GameStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::GameStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::GameStatus_<ContainerAllocator1> & lhs, const ::rm_msgs::GameStatus_<ContainerAllocator2> & rhs)
{
  return lhs.game_type == rhs.game_type &&
    lhs.game_progress == rhs.game_progress &&
    lhs.stage_remain_time == rhs.stage_remain_time &&
    lhs.sync_time_stamp == rhs.sync_time_stamp &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::GameStatus_<ContainerAllocator1> & lhs, const ::rm_msgs::GameStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::GameStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::GameStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::GameStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::GameStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::GameStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::GameStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::GameStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a9e39abf3567cbe229e978307d8a9be";
  }

  static const char* value(const ::rm_msgs::GameStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a9e39abf3567cbeULL;
  static const uint64_t static_value2 = 0x229e978307d8a9beULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::GameStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/GameStatus";
  }

  static const char* value(const ::rm_msgs::GameStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::GameStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 game_type\n"
"uint8 game_progress\n"
"uint16 stage_remain_time\n"
"uint64 sync_time_stamp\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::GameStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::GameStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.game_type);
      stream.next(m.game_progress);
      stream.next(m.stage_remain_time);
      stream.next(m.sync_time_stamp);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::GameStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::GameStatus_<ContainerAllocator>& v)
  {
    s << indent << "game_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.game_type);
    s << indent << "game_progress: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.game_progress);
    s << indent << "stage_remain_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.stage_remain_time);
    s << indent << "sync_time_stamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.sync_time_stamp);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_GAMESTATUS_H
