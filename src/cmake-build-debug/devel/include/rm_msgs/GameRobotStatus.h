// Generated by gencpp from file rm_msgs/GameRobotStatus.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_GAMEROBOTSTATUS_H
#define RM_MSGS_MESSAGE_GAMEROBOTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct GameRobotStatus_
{
  typedef GameRobotStatus_<ContainerAllocator> Type;

  GameRobotStatus_()
    : robot_id(0)
    , robot_level(0)
    , remain_hp(0)
    , max_hp(0)
    , shooter_id_1_17_mm_cooling_rate(0)
    , shooter_id_1_17_mm_cooling_limit(0)
    , shooter_id_1_17_mm_speed_limit(0)
    , shooter_id_2_17_mm_cooling_rate(0)
    , shooter_id_2_17_mm_cooling_limit(0)
    , shooter_id_2_17_mm_speed_limit(0)
    , shooter_id_1_42_mm_cooling_rate(0)
    , shooter_id_1_42_mm_cooling_limit(0)
    , shooter_id_1_42_mm_speed_limit(0)
    , chassis_power_limit(0)
    , mains_power_gimbal_output(0)
    , mains_power_chassis_output(0)
    , mains_power_shooter_output(0)
    , stamp()  {
    }
  GameRobotStatus_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , robot_level(0)
    , remain_hp(0)
    , max_hp(0)
    , shooter_id_1_17_mm_cooling_rate(0)
    , shooter_id_1_17_mm_cooling_limit(0)
    , shooter_id_1_17_mm_speed_limit(0)
    , shooter_id_2_17_mm_cooling_rate(0)
    , shooter_id_2_17_mm_cooling_limit(0)
    , shooter_id_2_17_mm_speed_limit(0)
    , shooter_id_1_42_mm_cooling_rate(0)
    , shooter_id_1_42_mm_cooling_limit(0)
    , shooter_id_1_42_mm_speed_limit(0)
    , chassis_power_limit(0)
    , mains_power_gimbal_output(0)
    , mains_power_chassis_output(0)
    , mains_power_shooter_output(0)
    , stamp()  {
  (void)_alloc;
    }



   typedef uint8_t _robot_id_type;
  _robot_id_type robot_id;

   typedef uint8_t _robot_level_type;
  _robot_level_type robot_level;

   typedef uint16_t _remain_hp_type;
  _remain_hp_type remain_hp;

   typedef uint16_t _max_hp_type;
  _max_hp_type max_hp;

   typedef uint16_t _shooter_id_1_17_mm_cooling_rate_type;
  _shooter_id_1_17_mm_cooling_rate_type shooter_id_1_17_mm_cooling_rate;

   typedef uint16_t _shooter_id_1_17_mm_cooling_limit_type;
  _shooter_id_1_17_mm_cooling_limit_type shooter_id_1_17_mm_cooling_limit;

   typedef uint16_t _shooter_id_1_17_mm_speed_limit_type;
  _shooter_id_1_17_mm_speed_limit_type shooter_id_1_17_mm_speed_limit;

   typedef uint16_t _shooter_id_2_17_mm_cooling_rate_type;
  _shooter_id_2_17_mm_cooling_rate_type shooter_id_2_17_mm_cooling_rate;

   typedef uint16_t _shooter_id_2_17_mm_cooling_limit_type;
  _shooter_id_2_17_mm_cooling_limit_type shooter_id_2_17_mm_cooling_limit;

   typedef uint16_t _shooter_id_2_17_mm_speed_limit_type;
  _shooter_id_2_17_mm_speed_limit_type shooter_id_2_17_mm_speed_limit;

   typedef uint16_t _shooter_id_1_42_mm_cooling_rate_type;
  _shooter_id_1_42_mm_cooling_rate_type shooter_id_1_42_mm_cooling_rate;

   typedef uint16_t _shooter_id_1_42_mm_cooling_limit_type;
  _shooter_id_1_42_mm_cooling_limit_type shooter_id_1_42_mm_cooling_limit;

   typedef uint16_t _shooter_id_1_42_mm_speed_limit_type;
  _shooter_id_1_42_mm_speed_limit_type shooter_id_1_42_mm_speed_limit;

   typedef uint16_t _chassis_power_limit_type;
  _chassis_power_limit_type chassis_power_limit;

   typedef uint8_t _mains_power_gimbal_output_type;
  _mains_power_gimbal_output_type mains_power_gimbal_output;

   typedef uint8_t _mains_power_chassis_output_type;
  _mains_power_chassis_output_type mains_power_chassis_output;

   typedef uint8_t _mains_power_shooter_output_type;
  _mains_power_shooter_output_type mains_power_shooter_output;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RED_HERO)
  #undef RED_HERO
#endif
#if defined(_WIN32) && defined(RED_ENGINEER)
  #undef RED_ENGINEER
#endif
#if defined(_WIN32) && defined(RED_STANDARD_3)
  #undef RED_STANDARD_3
#endif
#if defined(_WIN32) && defined(RED_STANDARD_4)
  #undef RED_STANDARD_4
#endif
#if defined(_WIN32) && defined(RED_STANDARD_5)
  #undef RED_STANDARD_5
#endif
#if defined(_WIN32) && defined(RED_AERIAL)
  #undef RED_AERIAL
#endif
#if defined(_WIN32) && defined(RED_SENTRY)
  #undef RED_SENTRY
#endif
#if defined(_WIN32) && defined(RED_RADAR)
  #undef RED_RADAR
#endif
#if defined(_WIN32) && defined(BLUE_HERO)
  #undef BLUE_HERO
#endif
#if defined(_WIN32) && defined(BLUE_ENGINEER)
  #undef BLUE_ENGINEER
#endif
#if defined(_WIN32) && defined(BLUE_STANDARD_3)
  #undef BLUE_STANDARD_3
#endif
#if defined(_WIN32) && defined(BLUE_STANDARD_4)
  #undef BLUE_STANDARD_4
#endif
#if defined(_WIN32) && defined(BLUE_STANDARD_5)
  #undef BLUE_STANDARD_5
#endif
#if defined(_WIN32) && defined(BLUE_AERIAL)
  #undef BLUE_AERIAL
#endif
#if defined(_WIN32) && defined(BLUE_SENTRY)
  #undef BLUE_SENTRY
#endif
#if defined(_WIN32) && defined(BLUE_RADAR)
  #undef BLUE_RADAR
#endif

  enum {
    RED_HERO = 1u,
    RED_ENGINEER = 2u,
    RED_STANDARD_3 = 3u,
    RED_STANDARD_4 = 4u,
    RED_STANDARD_5 = 5u,
    RED_AERIAL = 6u,
    RED_SENTRY = 7u,
    RED_RADAR = 9u,
    BLUE_HERO = 101u,
    BLUE_ENGINEER = 102u,
    BLUE_STANDARD_3 = 103u,
    BLUE_STANDARD_4 = 104u,
    BLUE_STANDARD_5 = 105u,
    BLUE_AERIAL = 106u,
    BLUE_SENTRY = 107u,
    BLUE_RADAR = 109u,
  };


  typedef boost::shared_ptr< ::rm_msgs::GameRobotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::GameRobotStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GameRobotStatus_

typedef ::rm_msgs::GameRobotStatus_<std::allocator<void> > GameRobotStatus;

typedef boost::shared_ptr< ::rm_msgs::GameRobotStatus > GameRobotStatusPtr;
typedef boost::shared_ptr< ::rm_msgs::GameRobotStatus const> GameRobotStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::GameRobotStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::GameRobotStatus_<ContainerAllocator1> & lhs, const ::rm_msgs::GameRobotStatus_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.robot_level == rhs.robot_level &&
    lhs.remain_hp == rhs.remain_hp &&
    lhs.max_hp == rhs.max_hp &&
    lhs.shooter_id_1_17_mm_cooling_rate == rhs.shooter_id_1_17_mm_cooling_rate &&
    lhs.shooter_id_1_17_mm_cooling_limit == rhs.shooter_id_1_17_mm_cooling_limit &&
    lhs.shooter_id_1_17_mm_speed_limit == rhs.shooter_id_1_17_mm_speed_limit &&
    lhs.shooter_id_2_17_mm_cooling_rate == rhs.shooter_id_2_17_mm_cooling_rate &&
    lhs.shooter_id_2_17_mm_cooling_limit == rhs.shooter_id_2_17_mm_cooling_limit &&
    lhs.shooter_id_2_17_mm_speed_limit == rhs.shooter_id_2_17_mm_speed_limit &&
    lhs.shooter_id_1_42_mm_cooling_rate == rhs.shooter_id_1_42_mm_cooling_rate &&
    lhs.shooter_id_1_42_mm_cooling_limit == rhs.shooter_id_1_42_mm_cooling_limit &&
    lhs.shooter_id_1_42_mm_speed_limit == rhs.shooter_id_1_42_mm_speed_limit &&
    lhs.chassis_power_limit == rhs.chassis_power_limit &&
    lhs.mains_power_gimbal_output == rhs.mains_power_gimbal_output &&
    lhs.mains_power_chassis_output == rhs.mains_power_chassis_output &&
    lhs.mains_power_shooter_output == rhs.mains_power_shooter_output &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::GameRobotStatus_<ContainerAllocator1> & lhs, const ::rm_msgs::GameRobotStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::GameRobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::GameRobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::GameRobotStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc5fb7b81d23729d5093f2858a70344a";
  }

  static const char* value(const ::rm_msgs::GameRobotStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc5fb7b81d23729dULL;
  static const uint64_t static_value2 = 0x5093f2858a70344aULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/GameRobotStatus";
  }

  static const char* value(const ::rm_msgs::GameRobotStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RED_HERO = 1\n"
"uint8 RED_ENGINEER = 2\n"
"uint8 RED_STANDARD_3 = 3\n"
"uint8 RED_STANDARD_4 = 4\n"
"uint8 RED_STANDARD_5 = 5\n"
"uint8 RED_AERIAL = 6\n"
"uint8 RED_SENTRY = 7\n"
"uint8 RED_RADAR = 9\n"
"uint8 BLUE_HERO = 101\n"
"uint8 BLUE_ENGINEER = 102\n"
"uint8 BLUE_STANDARD_3 = 103\n"
"uint8 BLUE_STANDARD_4 = 104\n"
"uint8 BLUE_STANDARD_5 = 105\n"
"uint8 BLUE_AERIAL = 106\n"
"uint8 BLUE_SENTRY = 107\n"
"uint8 BLUE_RADAR = 109\n"
"\n"
"uint8 robot_id\n"
"uint8 robot_level\n"
"uint16 remain_hp\n"
"uint16 max_hp\n"
"uint16 shooter_id_1_17_mm_cooling_rate\n"
"uint16 shooter_id_1_17_mm_cooling_limit\n"
"uint16 shooter_id_1_17_mm_speed_limit\n"
"uint16 shooter_id_2_17_mm_cooling_rate\n"
"uint16 shooter_id_2_17_mm_cooling_limit\n"
"uint16 shooter_id_2_17_mm_speed_limit\n"
"uint16 shooter_id_1_42_mm_cooling_rate\n"
"uint16 shooter_id_1_42_mm_cooling_limit\n"
"uint16 shooter_id_1_42_mm_speed_limit\n"
"uint16 chassis_power_limit\n"
"uint8 mains_power_gimbal_output\n"
"uint8 mains_power_chassis_output\n"
"uint8 mains_power_shooter_output\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::GameRobotStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.robot_level);
      stream.next(m.remain_hp);
      stream.next(m.max_hp);
      stream.next(m.shooter_id_1_17_mm_cooling_rate);
      stream.next(m.shooter_id_1_17_mm_cooling_limit);
      stream.next(m.shooter_id_1_17_mm_speed_limit);
      stream.next(m.shooter_id_2_17_mm_cooling_rate);
      stream.next(m.shooter_id_2_17_mm_cooling_limit);
      stream.next(m.shooter_id_2_17_mm_speed_limit);
      stream.next(m.shooter_id_1_42_mm_cooling_rate);
      stream.next(m.shooter_id_1_42_mm_cooling_limit);
      stream.next(m.shooter_id_1_42_mm_speed_limit);
      stream.next(m.chassis_power_limit);
      stream.next(m.mains_power_gimbal_output);
      stream.next(m.mains_power_chassis_output);
      stream.next(m.mains_power_shooter_output);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameRobotStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::GameRobotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::GameRobotStatus_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "robot_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_level);
    s << indent << "remain_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.remain_hp);
    s << indent << "max_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.max_hp);
    s << indent << "shooter_id_1_17_mm_cooling_rate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_1_17_mm_cooling_rate);
    s << indent << "shooter_id_1_17_mm_cooling_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_1_17_mm_cooling_limit);
    s << indent << "shooter_id_1_17_mm_speed_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_1_17_mm_speed_limit);
    s << indent << "shooter_id_2_17_mm_cooling_rate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_2_17_mm_cooling_rate);
    s << indent << "shooter_id_2_17_mm_cooling_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_2_17_mm_cooling_limit);
    s << indent << "shooter_id_2_17_mm_speed_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_2_17_mm_speed_limit);
    s << indent << "shooter_id_1_42_mm_cooling_rate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_1_42_mm_cooling_rate);
    s << indent << "shooter_id_1_42_mm_cooling_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_1_42_mm_cooling_limit);
    s << indent << "shooter_id_1_42_mm_speed_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.shooter_id_1_42_mm_speed_limit);
    s << indent << "chassis_power_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.chassis_power_limit);
    s << indent << "mains_power_gimbal_output: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mains_power_gimbal_output);
    s << indent << "mains_power_chassis_output: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mains_power_chassis_output);
    s << indent << "mains_power_shooter_output: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mains_power_shooter_output);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_GAMEROBOTSTATUS_H
