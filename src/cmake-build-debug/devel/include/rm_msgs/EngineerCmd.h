// Generated by gencpp from file rm_msgs/EngineerCmd.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_ENGINEERCMD_H
#define RM_MSGS_MESSAGE_ENGINEERCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct EngineerCmd_
{
  typedef EngineerCmd_<ContainerAllocator> Type;

  EngineerCmd_()
    : current_step_name()
    , finished_step(0)
    , total_steps(0)
    , step_queue_name()
    , symbol(false)
    , stamp()  {
    }
  EngineerCmd_(const ContainerAllocator& _alloc)
    : current_step_name(_alloc)
    , finished_step(0)
    , total_steps(0)
    , step_queue_name(_alloc)
    , symbol(false)
    , stamp()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _current_step_name_type;
  _current_step_name_type current_step_name;

   typedef uint32_t _finished_step_type;
  _finished_step_type finished_step;

   typedef uint32_t _total_steps_type;
  _total_steps_type total_steps;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _step_queue_name_type;
  _step_queue_name_type step_queue_name;

   typedef uint8_t _symbol_type;
  _symbol_type symbol;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::rm_msgs::EngineerCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::EngineerCmd_<ContainerAllocator> const> ConstPtr;

}; // struct EngineerCmd_

typedef ::rm_msgs::EngineerCmd_<std::allocator<void> > EngineerCmd;

typedef boost::shared_ptr< ::rm_msgs::EngineerCmd > EngineerCmdPtr;
typedef boost::shared_ptr< ::rm_msgs::EngineerCmd const> EngineerCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::EngineerCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::EngineerCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::EngineerCmd_<ContainerAllocator1> & lhs, const ::rm_msgs::EngineerCmd_<ContainerAllocator2> & rhs)
{
  return lhs.current_step_name == rhs.current_step_name &&
    lhs.finished_step == rhs.finished_step &&
    lhs.total_steps == rhs.total_steps &&
    lhs.step_queue_name == rhs.step_queue_name &&
    lhs.symbol == rhs.symbol &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::EngineerCmd_<ContainerAllocator1> & lhs, const ::rm_msgs::EngineerCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::EngineerCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::EngineerCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::EngineerCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::EngineerCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::EngineerCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::EngineerCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::EngineerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99c50feb8f06ee5ae16f37b16ca0b9f7";
  }

  static const char* value(const ::rm_msgs::EngineerCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99c50feb8f06ee5aULL;
  static const uint64_t static_value2 = 0xe16f37b16ca0b9f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::EngineerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/EngineerCmd";
  }

  static const char* value(const ::rm_msgs::EngineerCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::EngineerCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string current_step_name\n"
"uint32 finished_step\n"
"uint32 total_steps\n"
"\n"
"string step_queue_name\n"
"bool symbol\n"
"time stamp\n"
;
  }

  static const char* value(const ::rm_msgs::EngineerCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::EngineerCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_step_name);
      stream.next(m.finished_step);
      stream.next(m.total_steps);
      stream.next(m.step_queue_name);
      stream.next(m.symbol);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EngineerCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::EngineerCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::EngineerCmd_<ContainerAllocator>& v)
  {
    s << indent << "current_step_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.current_step_name);
    s << indent << "finished_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.finished_step);
    s << indent << "total_steps: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.total_steps);
    s << indent << "step_queue_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.step_queue_name);
    s << indent << "symbol: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.symbol);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_ENGINEERCMD_H
