// Generated by gencpp from file rm_msgs/StatusChangeRequest.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_STATUSCHANGEREQUEST_H
#define RM_MSGS_MESSAGE_STATUSCHANGEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct StatusChangeRequest_
{
  typedef StatusChangeRequest_<ContainerAllocator> Type;

  StatusChangeRequest_()
    : color(0)
    , target(0)
    , armor_target(0)
    , exposure(0)
    , use_id_classification(0)  {
    }
  StatusChangeRequest_(const ContainerAllocator& _alloc)
    : color(0)
    , target(0)
    , armor_target(0)
    , exposure(0)
    , use_id_classification(0)  {
  (void)_alloc;
    }



   typedef uint8_t _color_type;
  _color_type color;

   typedef uint8_t _target_type;
  _target_type target;

   typedef uint8_t _armor_target_type;
  _armor_target_type armor_target;

   typedef uint8_t _exposure_type;
  _exposure_type exposure;

   typedef uint8_t _use_id_classification_type;
  _use_id_classification_type use_id_classification;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RED)
  #undef RED
#endif
#if defined(_WIN32) && defined(BLUE)
  #undef BLUE
#endif
#if defined(_WIN32) && defined(ARMOR)
  #undef ARMOR
#endif
#if defined(_WIN32) && defined(BUFF)
  #undef BUFF
#endif
#if defined(_WIN32) && defined(ARMOR_ALL)
  #undef ARMOR_ALL
#endif
#if defined(_WIN32) && defined(ARMOR_OUTPOST_BASE)
  #undef ARMOR_OUTPOST_BASE
#endif
#if defined(_WIN32) && defined(ARMOR_WITHOUT_OUTPOST_BASE)
  #undef ARMOR_WITHOUT_OUTPOST_BASE
#endif
#if defined(_WIN32) && defined(EXPOSURE_LEVEL_0)
  #undef EXPOSURE_LEVEL_0
#endif
#if defined(_WIN32) && defined(EXPOSURE_LEVEL_1)
  #undef EXPOSURE_LEVEL_1
#endif
#if defined(_WIN32) && defined(EXPOSURE_LEVEL_2)
  #undef EXPOSURE_LEVEL_2
#endif
#if defined(_WIN32) && defined(EXPOSURE_LEVEL_3)
  #undef EXPOSURE_LEVEL_3
#endif
#if defined(_WIN32) && defined(EXPOSURE_LEVEL_4)
  #undef EXPOSURE_LEVEL_4
#endif

  enum {
    RED = 0u,
    BLUE = 1u,
    ARMOR = 0u,
    BUFF = 1u,
    ARMOR_ALL = 0u,
    ARMOR_OUTPOST_BASE = 1u,
    ARMOR_WITHOUT_OUTPOST_BASE = 2u,
    EXPOSURE_LEVEL_0 = 0u,
    EXPOSURE_LEVEL_1 = 1u,
    EXPOSURE_LEVEL_2 = 2u,
    EXPOSURE_LEVEL_3 = 3u,
    EXPOSURE_LEVEL_4 = 4u,
  };


  typedef boost::shared_ptr< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StatusChangeRequest_

typedef ::rm_msgs::StatusChangeRequest_<std::allocator<void> > StatusChangeRequest;

typedef boost::shared_ptr< ::rm_msgs::StatusChangeRequest > StatusChangeRequestPtr;
typedef boost::shared_ptr< ::rm_msgs::StatusChangeRequest const> StatusChangeRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::StatusChangeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::StatusChangeRequest_<ContainerAllocator1> & lhs, const ::rm_msgs::StatusChangeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.target == rhs.target &&
    lhs.armor_target == rhs.armor_target &&
    lhs.exposure == rhs.exposure &&
    lhs.use_id_classification == rhs.use_id_classification;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::StatusChangeRequest_<ContainerAllocator1> & lhs, const ::rm_msgs::StatusChangeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5974674c612c2ddc9fe100a2fa0334b";
  }

  static const char* value(const ::rm_msgs::StatusChangeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5974674c612c2ddULL;
  static const uint64_t static_value2 = 0xc9fe100a2fa0334bULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/StatusChangeRequest";
  }

  static const char* value(const ::rm_msgs::StatusChangeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 color\n"
"uint8 target\n"
"uint8 armor_target\n"
"uint8 exposure\n"
"uint8 use_id_classification\n"
"uint8 RED = 0\n"
"uint8 BLUE = 1\n"
"uint8 ARMOR = 0\n"
"uint8 BUFF = 1\n"
"uint8 ARMOR_ALL = 0\n"
"uint8 ARMOR_OUTPOST_BASE = 1\n"
"uint8 ARMOR_WITHOUT_OUTPOST_BASE = 2\n"
"uint8 EXPOSURE_LEVEL_0 = 0\n"
"uint8 EXPOSURE_LEVEL_1 = 1\n"
"uint8 EXPOSURE_LEVEL_2 = 2\n"
"uint8 EXPOSURE_LEVEL_3 = 3\n"
"uint8 EXPOSURE_LEVEL_4 = 4\n"
;
  }

  static const char* value(const ::rm_msgs::StatusChangeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.target);
      stream.next(m.armor_target);
      stream.next(m.exposure);
      stream.next(m.use_id_classification);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatusChangeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::StatusChangeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::StatusChangeRequest_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color);
    s << indent << "target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target);
    s << indent << "armor_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armor_target);
    s << indent << "exposure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exposure);
    s << indent << "use_id_classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_id_classification);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_STATUSCHANGEREQUEST_H
